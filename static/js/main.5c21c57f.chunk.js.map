{"version":3,"sources":["Components/TopBar/SearchBar/SearchBar.jsx","Components/TopBar/TopBar.jsx","Components/Team/TeamMember/TeamMember.jsx","Components/Team/Team.jsx","Components/Result/ResultItem/ResultItem.jsx","Components/Result/Result.jsx","Components/CreditBox/CreditBox.jsx","Components/SuperHeroApp.jsx","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","search","position","borderRadius","shape","backgroundColor","fade","palette","common","white","marginRight","spacing","marginLeft","width","breakpoints","up","searchIcon","padding","height","pointerEvents","display","alignItems","justifyContent","inputRoot","color","inputInput","paddingLeft","transition","transitions","create","SearchBar","props","classes","className","InputBase","placeholder","root","input","onKeyPress","event","changeQuery","changeQueryHandler","onChangeQueryHandler","inputProps","grow","flexGrow","title","TopBar","AppBar","Toolbar","Typography","variant","noWrap","Button","onClick","changeView","changeViewHandler","message","TeamMember","handleRemoveFromTeam","removeFromTeamHandler","state","member","this","id","name","image","powerstats","stats","intelligence","strength","speed","durability","power","combat","statNames","Card","key","CardMedia","url","CardContent","gutterBottom","component","map","statName","indexOf","CardActions","size","React","Component","Team","averageStats","teamMembers","length","renderStats","Paper","stat","toFixed","calculateNewAverages","n","newAverages","parseInt","i","ResultItem","handleExpandClick","setState","expanded","handleAddToTeam","addHandler","hero","handleRemoveFromResults","removeHandler","biography","appearance","work","publisher","Collapse","in","timeout","unmountOnExit","alignment","join","IconButton","aria-expanded","aria-label","getExpandIcon","require","isEqual","Result","handleRemoveResult","prevState","results","filter","element","baseURL","process","proxyURL","responseMessage","wrapper","createRef","bind","abortController","AbortController","nextProps","query","callAPI","abort","cleanedQuery","replace","URL","fetch","signal","then","result","json","data","response","catch","console","log","addToTeamHandler","ref","CreditBox","href","creatorLink","target","rel","purpose","sourceCodeLink","PURPOSE","CREATOR_LINK","SuperHeroApp","currentQuery","value","toLowerCase","showingTeam","onAddToTeamHandler","newTeam","team","IDSet","currIDs","has","alert","push","add","Set","prevProps","App","Helmet","Boolean","window","location","hostname","match","document","getElementById","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.5c21c57f.chunk.js","sourcesContent":["//functional component that returns a search bar, that can be used to search for superheros in the API\r\n//it takes as props an changeQueryHandler, that allows this class to modify the state of its parent (or grandparent) components\r\n//and sets the state of the parent component to have the new query, so the parent component can do as it pleases with\r\n\r\nimport React from \"react\";\r\nimport { fade, makeStyles } from \"@material-ui/core/styles\";\r\nimport InputBase from \"@material-ui/core/InputBase\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\n\r\n//some styles to make it pretty\r\nconst useStyles = makeStyles((theme) => ({\r\n  search: {\r\n    position: \"relative\",\r\n    borderRadius: theme.shape.borderRadius,\r\n    backgroundColor: fade(theme.palette.common.white, 0.15),\r\n    \"&:hover\": {\r\n      backgroundColor: fade(theme.palette.common.white, 0.25),\r\n    },\r\n    marginRight: theme.spacing(2),\r\n    marginLeft: 0,\r\n    width: \"100%\",\r\n    [theme.breakpoints.up(\"sm\")]: {\r\n      marginLeft: theme.spacing(3),\r\n      width: \"auto\",\r\n    },\r\n  },\r\n  searchIcon: {\r\n    padding: theme.spacing(0, 2),\r\n    height: \"100%\",\r\n    position: \"absolute\",\r\n    pointerEvents: \"none\",\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n  },\r\n  inputRoot: {\r\n    color: \"inherit\",\r\n  },\r\n  inputInput: {\r\n    padding: theme.spacing(1, 1, 1, 0),\r\n    // vertical padding + font size from searchIcon\r\n    paddingLeft: `calc(1em + ${theme.spacing(4)}px)`,\r\n    transition: theme.transitions.create(\"width\"),\r\n    width: \"100%\",\r\n    [theme.breakpoints.up(\"md\")]: {\r\n      width: \"20ch\",\r\n    },\r\n  },\r\n}));\r\n\r\n//precondition: props.changeQueryHandler must be a function that modifies the state of the parent component from which it originates, props must be an object\r\n//postcondition: this function returns a search bar component that will accept queries and pass them to the parent component by updating the state of the parent component\r\nexport default function SearchBar(props) {\r\n  const classes = useStyles();\r\n\r\n  //take the event and the handler that was passed down as a prop, and change the query of the SuperHeroApp class\r\n  const onChangeQueryHandler = (event) => {\r\n    const changeQuery = props.changeQueryHandler;\r\n    changeQuery(event);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className={classes.search}>\r\n        <div className={classes.searchIcon}>\r\n          <SearchIcon />\r\n        </div>\r\n        <InputBase\r\n          placeholder=\"Search for a superhero…\"\r\n          classes={{\r\n            root: classes.inputRoot,\r\n            input: classes.inputInput,\r\n          }}\r\n          onKeyPress={(event) => onChangeQueryHandler(event)}\r\n          inputProps={{\r\n            \"aria-label\": \"search\",\r\n          }}\r\n        />\r\n      </div>\r\n      <div className={classes.grow} />\r\n    </>\r\n  );\r\n}\r\n\r\nSearchBar.propTypes = {\r\n  changeQueryHandler: PropTypes.func.isRequired,\r\n};\r\n","//a function that is the search bar for the program as a react element\r\n//its a function and not a class since it won't have a life cycle, so there is no need for a state - makes it simpler and more maintainable\r\n//it receives as props a handler from SuperHeroApp, where SuperHeroApp will determine if the\r\n//new query should be submitted to the API or not (when the user presses the enter key)\r\n\r\nimport React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport SearchBar from \"./SearchBar/SearchBar\";\r\n\r\n//styles for the bar to make it pretty\r\nconst useStyles = makeStyles((theme) => ({\r\n  grow: {\r\n    flexGrow: 1,\r\n  },\r\n\r\n  title: {\r\n    display: \"none\",\r\n    [theme.breakpoints.up(\"sm\")]: {\r\n      display: \"block\",\r\n    },\r\n  },\r\n}));\r\n\r\n//precondition: props.changeViewHandler must be a function that modifies the state of the parent component from which it originates,\r\n//              props.message must be a string that represents the message on the button, props must be an object\r\n//postcondition: this function returns a top bar component that includes a search bar, and a button to to change between views\r\nexport default function TopBar(props) {\r\n  //handler from the props, modify the state of the parent component\r\n  const changeViewHandler = () => {\r\n    const changeView = props.changeViewHandler;\r\n    changeView();\r\n  };\r\n\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.grow}>\r\n      <AppBar position=\"static\">\r\n        <Toolbar>\r\n          {/* Title for the top left of the app bar */}\r\n          <Typography className={classes.title} variant=\"h6\" noWrap>\r\n            Superhero Team Builder\r\n          </Typography>\r\n          <SearchBar changeQueryHandler={props.changeQueryHandler} />\r\n          <Button onClick={() => changeViewHandler()} variant=\"contained\">\r\n            {props.message}\r\n          </Button>\r\n        </Toolbar>\r\n      </AppBar>\r\n    </div>\r\n  );\r\n}\r\n\r\nTopBar.propTypes = {\r\n  changeQueryHandler: PropTypes.func.isRequired,\r\n  message: PropTypes.string.isRequired,\r\n};\r\n","// team member class that represents a member of the team, and generates a react card with all the relevant information\r\n\r\nimport React from \"react\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardActions from \"@material-ui/core/CardActions\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport CardMedia from \"@material-ui/core/CardMedia\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\nimport \"./TeamMember.css\";\r\n\r\nexport default class TeamMember extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = { member: null };\r\n  }\r\n\r\n  //check for new props, and update accordingly\r\n  static getDerivedStateFromProps(props, state) {\r\n    if (props.member !== state.member) {\r\n      return { member: props.member };\r\n    }\r\n    return null;\r\n  }\r\n\r\n  //handle when the user clicks the \"Remove from team button\"\r\n  handleRemoveFromTeam = () => {\r\n    this.props.removeFromTeamHandler(this.state.member);\r\n  };\r\n\r\n  render() {\r\n    const { id, name, image, powerstats } = this.props.member; //de-structure to reduce the code base and improve readability\r\n\r\n    //for building the list using the map function\r\n    //these two arrays are here so that, in case a new stat is added, we can just add it to the stat array and the name, and then the map function below\r\n    //will add it automatically - promotes maintainability and extensibility of the code\r\n    const stats = [\r\n      powerstats.intelligence,\r\n      powerstats.strength,\r\n      powerstats.speed,\r\n      powerstats.durability,\r\n      powerstats.power,\r\n      powerstats.combat,\r\n    ];\r\n    const statNames = [\r\n      \"Intelligence\",\r\n      \"Strength\",\r\n      \"Speed\",\r\n      \"Durability\",\r\n      \"Power\",\r\n      \"Combat\",\r\n    ];\r\n\r\n    return (\r\n      <Card className={\"searchResultCardRoot\"} key={id}>\r\n        <CardMedia\r\n          className={\"media\"}\r\n          image={`${image.url}`}\r\n          title={`Image of ${name}`}\r\n        />\r\n        <CardContent>\r\n          <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n            {name}\r\n          </Typography>\r\n          <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n            {/* build a list of the stats for this team member */}\r\n            {statNames.map((statName) => (\r\n              <p>{`${statName}: ${stats[statNames.indexOf(statName)]}`}</p>\r\n            ))}\r\n          </Typography>\r\n        </CardContent>\r\n        <CardActions>\r\n          <Button\r\n            size=\"small\"\r\n            onClick={this.handleRemoveFromTeam}\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n          >\r\n            Remove from team{\" \"}\r\n          </Button>\r\n        </CardActions>\r\n      </Card>\r\n    );\r\n  }\r\n}\r\n","//a react class that represents the team built by the user\r\n//returns a component that will calculate the team averages on the fly, as well as display each team member in their own card\r\nimport React from \"react\";\r\nimport TeamMember from \"./TeamMember/TeamMember\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport \"./Team.css\";\r\nexport default class Team extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      averageStats: [0, 0, 0, 0, 0, 0, 0], // current average stats are in the following order: Intelligence, Strength, Speed, Durability, Power, Combat\r\n    };\r\n    this.stats = [\r\n      \"Intelligence\",\r\n      \"Strength\",\r\n      \"Speed\",\r\n      \"Durability\",\r\n      \"Power\",\r\n      \"Combat\",\r\n    ];\r\n  }\r\n\r\n  static getDerivedStateFromProps(props, state) {\r\n    if (props.teamMembers !== state.teamMembers) {\r\n      const teamMembers = props.teamMembers;\r\n      const newAverages = Team.calculateNewAverages(teamMembers);\r\n      return { averageStats: newAverages };\r\n    }\r\n    return null;\r\n  }\r\n\r\n  render() {\r\n    // if there are no members in the team, then do nothing\r\n    if (this.props.teamMembers.length === 0) {\r\n      return (\r\n        <div>\r\n          <h1>Your Team:</h1>\r\n          <p>\r\n            You haven't added anyone to your team yet. Search for a superhero to\r\n            add them to your team.\r\n          </p>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    //non empty team members\r\n    const teamMembers = this.props.teamMembers;\r\n    const stats = this.renderStats();\r\n\r\n    return (\r\n      <div>\r\n        <h1>Your Team:</h1>\r\n        <Paper>\r\n          <div className=\"teamBox\">\r\n            <div className=\"teamMembers\">\r\n              {teamMembers.map((member) => (\r\n                <TeamMember\r\n                  member={member}\r\n                  removeFromTeamHandler={this.props.removeFromTeamHandler}\r\n                ></TeamMember>\r\n              ))}\r\n            </div>\r\n            <div className=\"teamStats\">{stats}</div>\r\n          </div>\r\n        </Paper>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  //function that returns a div that contains the average stats of the current team\r\n  renderStats() {\r\n    return (\r\n      <div className=\"averageStatContainer\">\r\n        <h2>Average Stats:</h2>\r\n        <p>This shows the average stats amongst all the team members.</p>\r\n        {this.stats.map((stat) => (\r\n          <div\r\n            className=\"averageStat\"\r\n            id={`${stat}`}\r\n          >{`${stat}: ${this.state.averageStats[\r\n            this.stats.indexOf(stat)\r\n          ].toFixed(1)}`}</div>\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  //function to calculate the averages\r\n  //called by component will receive props in order to achieve separation of concerns\r\n  static calculateNewAverages(teamMembers) {\r\n    const n = teamMembers.length;\r\n    const newAverages = [0, 0, 0, 0, 0, 0, 0];\r\n    if (n === 0) {\r\n      return newAverages;\r\n    }\r\n    //sum each stat for each team member\r\n    for (const member of teamMembers) {\r\n      newAverages[0] += parseInt(member.powerstats.intelligence);\r\n      newAverages[1] += parseInt(member.powerstats.strength);\r\n      newAverages[2] += parseInt(member.powerstats.speed);\r\n      newAverages[3] += parseInt(member.powerstats.durability);\r\n      newAverages[4] += parseInt(member.powerstats.power);\r\n      newAverages[5] += parseInt(member.powerstats.combat);\r\n    }\r\n    //divide by the number of team members to get the average\r\n    for (let i = 0; i < newAverages.length; i++) {\r\n      newAverages[i] = newAverages[i] / n;\r\n    }\r\n    return newAverages;\r\n  }\r\n}\r\n\r\nTeam.propTypes = {\r\n  teamMembers: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n  removeFromTeamHandler: PropTypes.func.isRequired,\r\n};\r\n","//this class represents a result from the api, and will return an expandable card that can show or hide details about the super hero\r\n//it is a class and not a functional component because it has a lifecycle, and can be updated to feature new members, and also has an expanded state\r\n\r\nimport React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardActions from \"@material-ui/core/CardActions\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport CardMedia from \"@material-ui/core/CardMedia\";\r\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\r\nimport ExpandLessIcon from \"@material-ui/icons/ExpandLess\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Collapse from \"@material-ui/core/Collapse\";\r\n\r\nimport \"./ResultItem.css\";\r\n\r\nexport default class ResultItem extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      expanded: false,\r\n      hero: null,\r\n    };\r\n  }\r\n\r\n  //new search query has been give from this component's parent props - set the state and re-render\r\n  //since i am comparing the hero objects here !== won't work since it is comparing by reference\r\n  //and while JSON.stringify(props.hero) !== JSON.stringify(state.hero) would work, it returns false if the attributes are in a different order\r\n  //since it is from an API, the attributes being in a different order shouldnt be a big problem, however using isEqual from lodash is a more\r\n  //robust solution and will have slightly better performance since it wont run through the entire object, it will return false at the first difference\r\n  static getDerivedStateFromProps(props, state) {\r\n    var _ = require(\"lodash\"); //require lodash to compare strings\r\n    if (!_.isEqual(props.hero, state.hero)) {\r\n      return { hero: props.hero };\r\n    }\r\n    return null;\r\n  }\r\n\r\n  //handle when expanded/collapsed button is clicked\r\n  handleExpandClick = () => {\r\n    this.setState({ expanded: !this.state.expanded });\r\n  };\r\n\r\n  //handler for adding to team\r\n  //this handler should come from the SuperHeroApp component and passed through result to this component as a prop\r\n  handleAddToTeam = () => {\r\n    const addHandler = this.props.addHandler;\r\n    const hero = this.props.hero;\r\n    //check if it was properly added to the team, and if so, remove it from the results\r\n    if (addHandler(hero)) {\r\n      this.handleRemoveFromResults(hero);\r\n    }\r\n  };\r\n\r\n  //handler for removing from results once it has been added\r\n  //this handler should be passed as a prop from the Result component\r\n  handleRemoveFromResults = (hero) => {\r\n    this.props.removeHandler(hero);\r\n  };\r\n\r\n  //function that determines which icon to use depending on if the card is expanded or collapsed\r\n  getExpandIcon() {\r\n    if (this.state.expanded) {\r\n      return <ExpandLessIcon />;\r\n    } else {\r\n      return <ExpandMoreIcon />;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      name,\r\n      image,\r\n      biography,\r\n      powerstats,\r\n      appearance,\r\n      work,\r\n      id,\r\n    } = this.props.hero; //use destructuring to make the code more readable and reduce the code base\r\n\r\n    //these two arrays are here so that, in case a new stat is added, we can just add it to the stat array and the name, and then the map function below\r\n    //will add it automatically - promotes maintainability and extensibility of the code\r\n    const stats = [\r\n      powerstats.intelligence,\r\n      powerstats.strength,\r\n      powerstats.speed,\r\n      powerstats.durability,\r\n      powerstats.power,\r\n      powerstats.combat,\r\n    ];\r\n\r\n    const statNames = [\r\n      \"Intelligence\",\r\n      \"Strength\",\r\n      \"Speed\",\r\n      \"Durability\",\r\n      \"Power\",\r\n      \"Combat\",\r\n    ];\r\n\r\n    let expanded = this.state.expanded;\r\n\r\n    return (\r\n      <Card className={\"resultItemCardRoot\"} key={id}>\r\n        <CardMedia\r\n          className={\"media\"}\r\n          image={`${image.url}`}\r\n          title={`Image of ${name}`}\r\n        />\r\n        <CardContent>\r\n          <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n            {name}\r\n          </Typography>\r\n          <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n            Full Name: {biography[\"full-name\"]} <br></br>\r\n            Occupation: {work[\"occupation\"]}\r\n            {/* i use biography[\"full-name\"] instead of the dot notation here because  biography.full-name returns NaN*/}\r\n            <br></br>\r\n            Publisher: {biography.publisher}\r\n          </Typography>\r\n        </CardContent>\r\n\r\n        {/* The hidden details that can be expanded */}\r\n        <Collapse in={expanded} timeout=\"auto\" unmountOnExit>\r\n          <CardContent>\r\n            {/* My gut tells me there is a better way to do this, but I can't think of it\r\n                    TODO: think of a better way that is more extensible */}\r\n            {/* Biography box for the hero */}\r\n            <div className=\"resultItemBiographyBox\">\r\n              <Typography>\r\n                {\" \"}\r\n                <u>Biography:</u>\r\n                <br></br>\r\n                Alignment: {biography.alignment}{\" \"}\r\n                {/* Right now it says \"good\" instead of \"Good\" (same for neutral and evil) this is due to the API returning \"good\" instead of \"Good\"- needs to be fixed*/}\r\n                <br></br>\r\n                Alter Egos: {biography[\"alter-egos\"]}\r\n                <br></br>\r\n                Aliases: {biography[\"aliases\"].join(\", \")}{\" \"}\r\n                {/* the join is to list all the elements with a \", \" between them */}\r\n                <br></br>\r\n                Place of Birth: {biography[\"place-of-birth\"]}\r\n                <br></br>\r\n                First Appearance: {biography[\"first-appearance\"]}\r\n              </Typography>\r\n            </div>\r\n            <br></br>\r\n            {/* Appearance box to list what the hero looks like */}\r\n            <div className=\"resultItemAppearanceBox\">\r\n              <Typography>\r\n                {\" \"}\r\n                <u>Appearance:</u>\r\n                <br></br>\r\n                Gender: {appearance[\"gender\"]}\r\n                <br></br>\r\n                Race: {appearance[\"race\"]}\r\n                <br></br>\r\n                Height: {appearance[\"height\"].join(\", \")}\r\n                {/* the join is to list all the elements with a \", \" between them */}\r\n                <br></br>\r\n                Weight: {appearance[\"weight\"].join(\", \")}\r\n                <br></br>\r\n                Eye color: {appearance[\"eye-color\"]}\r\n                <br></br>\r\n                Hair color: {appearance[\"hair-color\"]}\r\n              </Typography>\r\n            </div>\r\n            <br></br>\r\n            {/* Box for the states for this hero */}\r\n            <div className=\"resultItemStatsBox\">\r\n              {statNames.map((statName) => (\r\n                <Typography id={statName}>{`${statName}: ${\r\n                  stats[statNames.indexOf(statName)]\r\n                }`}</Typography>\r\n              ))}\r\n            </div>\r\n          </CardContent>\r\n        </Collapse>\r\n        <CardActions>\r\n          {/* Button to handle expanding for more details to a team */}\r\n          <IconButton\r\n            onClick={this.handleExpandClick}\r\n            aria-expanded={expanded}\r\n            aria-label=\"Ver mais\"\r\n          >\r\n            {/* get the expand/collapse icon */}\r\n            {this.getExpandIcon()}\r\n          </IconButton>\r\n          {/* Button to handle adding to a team */}\r\n          <Button\r\n            size=\"small\"\r\n            onClick={this.handleAddToTeam}\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n          >\r\n            Add to Team\r\n          </Button>\r\n        </CardActions>\r\n      </Card>\r\n    );\r\n  }\r\n}\r\n\r\nResultItem.propTypes = {\r\n  hero: PropTypes.object.isRequired,\r\n  addHandler: PropTypes.func.isRequired,\r\n  removeHandler: PropTypes.func.isRequired,\r\n};\r\n","//this class makes the api call to the super hero api, and returns a div with all the results\r\nimport React from \"react\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport ResultItem from \"./ResultItem/ResultItem\";\r\nimport PropTypes from \"prop-types\";\r\n\r\n//see my notes in the README as to why using environment variables is a bad idea for production builds\r\nconst API_KEY = process.env.REACT_APP_API_KEY;\r\n\r\nexport default class Result extends React.Component {\r\n  //baseURL: the base url to call the api with (API key should be included here)\r\n  //proxyURL: the proxy url to call forward the request to in order to eliminate CORS errors\r\n  //both should be passed from the SuperHeroAppComponent\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      baseURL: `https://superheroapi.com/api/${API_KEY}`,\r\n      proxyURL: \"https://cors-anywhere.herokuapp.com/\",\r\n      results: [],\r\n      responseMessage: \"Try searching for a superhero\",\r\n    };\r\n    this.wrapper = React.createRef();\r\n    this.handleRemoveResult = this.handleRemoveResult.bind(this);\r\n    this.abortController = new AbortController();\r\n  }\r\n\r\n  //check if the query has changed - if so call the api, and then re render this component with the new results\r\n  componentDidUpdate(nextProps) {\r\n    if (nextProps.query !== this.props.query) {\r\n      this.callAPI(this.props.query);\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.callAPI(this.props.query);\r\n  }\r\n\r\n  //if the view is changed early, abort the call\r\n  componentWillUnmount() {\r\n    this.abortController.abort();\r\n  }\r\n\r\n  //function that takes as input a string that represents a query\r\n  callAPI(query) {\r\n    this.setState({ results: [] }); //empty the previous results\r\n\r\n    //if the query is the empty string, do not call the api, and instead do nothing\r\n    if (query === \"\") {\r\n      return;\r\n    }\r\n\r\n    //non empty string query, pass it to the API to get the information\r\n    //in an ideal world, this would have been handled by the back-end, but this app has no real back-end so this React component will handle it\r\n    //clean the query to remove spaces and encode them properly as URLs, no need to sanitize the input because the React DOM already does that for us\r\n    //https://reactjs.org/docs/introducing-jsx.html#jsx-prevents-injection-attacks\r\n    const cleanedQuery = query.replace(\" \", \"%20\");\r\n    const URL = `${this.state.baseURL}/search/${cleanedQuery}`;\r\n    fetch(this.state.proxyURL + URL, { signal: this.abortController.signal })\r\n      .then((result) => result.json())\r\n      .then((data) => {\r\n        //only update upon receiving a success\r\n        if (data.response === \"success\") {\r\n          this.setState({ results: data.results });\r\n        } else {\r\n          //tell the user no such superhero exists\r\n          this.setState({\r\n            responseMessage: `No such superhero with the name \"${query}\" could be found. Try searching for another one.`,\r\n          });\r\n        }\r\n      })\r\n      .catch(console.log);\r\n  }\r\n\r\n  //remove the result from the result list after it has been added to the team\r\n  handleRemoveResult = (hero) => {\r\n    this.setState((prevState) => ({\r\n      results: prevState.results.filter((element) => element.id !== hero.id),\r\n    }));\r\n  };\r\n\r\n  //show the results by passing each result as a prop to ResultItem to generate a new card component with all the information\r\n  render() {\r\n    const results = this.state.results;\r\n    const addHandler = this.props.addToTeamHandler;\r\n    //if no results are found, default to a message telling the user to search for a superhero\r\n\r\n    if (this.state.results.length === 0) {\r\n      return (\r\n        <div>\r\n          <h1>Search Results:</h1>\r\n          <p>{this.state.responseMessage}</p>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <div className=\"resultBox\" ref={this.wrapper}>\r\n        <h1>Search Results:</h1>\r\n        {results.map((result) => (\r\n          <ResultItem\r\n            hero={result}\r\n            addHandler={addHandler}\r\n            key={`${result.id}-${results.indexOf(result)}`}\r\n            removeHandler={this.handleRemoveResult}\r\n          ></ResultItem>\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nResult.propTypes = {\r\n  query: PropTypes.string.isRequired,\r\n  addToTeamHandler: PropTypes.func.isRequired,\r\n};\r\n","/*functional component that simply holds the text at the bottom of the page\r\nit was done in this manner to make the component extensible for many projects\r\nprecondition: it takes a props object as input that contains the following attributes:\r\n                name: string representing the name of the creator\r\n                purpose: string representing why this app was created\r\n                creatorLink: string representing a URL to the creator's website or personal portfolio\r\n                sourceCodeLink: string representing a URL to the source code of this app\r\npostcondition: it creates a div that contains the following text: \"This React app was created by (NAME) for (PURPOSE). Check out the source code on Github\"\r\nthe name and purpose can be modified by the parent class\r\n*/\r\nimport React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport default function CreditBox(props) {\r\n  CreditBox.propTypes = {\r\n    name: PropTypes.string.isRequired,\r\n    purpose: PropTypes.string.isRequired,\r\n    creatorLink: PropTypes.string.isRequired,\r\n    sourceCodeLink: PropTypes.string.isRequired,\r\n  };\r\n\r\n  return (\r\n    <div className=\"creditBox\">\r\n      <p>\r\n        This React app was created by{\" \"}\r\n        <a href={props.creatorLink} target=\"_blank\" rel=\"noopener noreferrer\">\r\n          {props.name}\r\n        </a>{\" \"}\r\n        {props.purpose} Check out the source code on{\" \"}\r\n        <a\r\n          href={props.sourceCodeLink}\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          Github\r\n        </a>\r\n        .\r\n      </p>\r\n    </div>\r\n  );\r\n}\r\n","//a wrapper class that will be responsible for the interaction between all the components\r\n//will pass data between the components and is the parent class for all components\r\n//will be rendered by the App component in App.js\r\nimport React from \"react\";\r\n\r\n//custom components import\r\nimport TopBar from \"./TopBar/TopBar\";\r\nimport Team from \"./Team/Team\";\r\nimport Result from \"./Result/Result\";\r\nimport CreditBox from \"./CreditBox/CreditBox\";\r\n\r\nimport \"./SuperHeroApp.css\";\r\n\r\nconst NAME = \"James Ting\";\r\nconst PURPOSE = \"as a solution to the Fundmore.ai coding challenge.\";\r\nconst CREATOR_LINK = \"https://www.linkedin.com/in/james-b-ting/\";\r\nconst SOURCE_CODE_LINK = \"https://github.com/jamesbting/fundmore-challenge\";\r\n\r\nexport default class SuperHeroApp extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      currIDs: new Set(),\r\n      team: [],\r\n      currentQuery: \"\", //default to empty string on start\r\n      showingTeam: true,\r\n    };\r\n    this.wrapper = React.createRef();\r\n\r\n    //bind the this key word to this instance of the SuperHero so that when it is called outside of the function\r\n    //it updates the correct state\r\n    this.onChangeQueryHandler = this.onChangeQueryHandler.bind(this);\r\n    this.onAddToTeamHandler = this.onAddToTeamHandler.bind(this);\r\n    this.removeFromTeamHandler = this.removeFromTeamHandler.bind(this);\r\n    this.changeViewHandler = this.changeViewHandler.bind(this);\r\n  }\r\n\r\n  //check if the props has changed (the current query and/or the team), and if so\r\n  //set the state appropriately and then re-render this component and children\r\n  componentDidUpdate(prevProps) {\r\n    if (this.props.currentQuery !== prevProps.currentQuery) {\r\n      this.setState((prevState, props) => ({\r\n        currentQuery: props.currentQuery,\r\n      }));\r\n    } else if (this.props.team !== prevProps.team) {\r\n      this.setState({ team: this.props.team });\r\n    }\r\n  }\r\n\r\n  //pass this query change handler to the search bar\r\n  //set the state to the new query if and only if the enter key was pressed\r\n  onChangeQueryHandler = (event) => {\r\n    if (event.key === \"Enter\") {\r\n      this.setState({\r\n        currentQuery: event.target.value.toLowerCase(),\r\n        showingTeam: false, //change showingTeam to false so the user can see the search results\r\n      });\r\n    }\r\n  };\r\n\r\n  //pass this team handler to the results\r\n  //this function pushes the new member to the current team array if the current team member's id is not in the set (since IDs are unique)\r\n  //and then updates the state\r\n  //once the state has been updated, the component should re-render\r\n  onAddToTeamHandler = (hero) => {\r\n    const newTeam = this.state.team;\r\n    const IDSet = this.state.currIDs;\r\n    if (IDSet.has(hero.id)) {\r\n      alert(\r\n        `Looks like ${hero.name} is already in the team! Try adding another superhero`\r\n      );\r\n      return false;\r\n    } else {\r\n      newTeam.push(hero);\r\n      IDSet.add(hero.id);\r\n      this.setState({ team: newTeam, currIDs: IDSet, showingTeam: true }); //change the state to showingTeam so that the user can see the team with the new hero added\r\n      return true;\r\n    }\r\n  };\r\n\r\n  //pass this handler to team member as a prop\r\n  //this function will filter the current team upon the team member getting the remove from team button is clicked\r\n  removeFromTeamHandler = (hero) => {\r\n    this.setState((prevState) => ({\r\n      team: prevState.team.filter((element) => element.id !== hero.id),\r\n    }));\r\n  };\r\n\r\n  //pass this handler to the topbar component, which will pass it to the change view button so that the button in the topbar can modify\r\n  //the current view of the app\r\n  changeViewHandler = () => {\r\n    this.setState((prevState) => ({ showingTeam: !prevState.showingTeam }));\r\n  };\r\n\r\n  render() {\r\n    const team = this.state.team;\r\n    const showingTeam = this.state.showingTeam;\r\n\r\n    //showing the team view\r\n    if (showingTeam) {\r\n      return (\r\n        <>\r\n          {/* Make the top bar element */}\r\n          <TopBar\r\n            changeQueryHandler={this.onChangeQueryHandler}\r\n            changeViewHandler={this.changeViewHandler}\r\n            message={\"See search results\"}\r\n          ></TopBar>\r\n          {/* return the super hero details page */}\r\n          <div className=\"appContainer\">\r\n            <div className=\"teamContainer\">\r\n              <Team\r\n                teamMembers={team}\r\n                removeFromTeamHandler={this.removeFromTeamHandler}\r\n              ></Team>\r\n            </div>\r\n            {/* Credit box */}\r\n            <CreditBox\r\n              name={NAME}\r\n              purpose={PURPOSE}\r\n              creatorLink={CREATOR_LINK}\r\n              sourceCodeLink={SOURCE_CODE_LINK}\r\n            ></CreditBox>\r\n          </div>\r\n        </>\r\n      );\r\n\r\n      //showing search results view\r\n    } else {\r\n      return (\r\n        <>\r\n          {/* Make the top bar element */}\r\n          <TopBar\r\n            changeQueryHandler={this.onChangeQueryHandler}\r\n            changeViewHandler={this.changeViewHandler}\r\n            message={\"See your team\"}\r\n          ></TopBar>\r\n          {/* return the super hero details page */}\r\n          <div className=\"appContainer\">\r\n            <div className=\"resultsContainer\" ref={this.wrapper}>\r\n              <Result\r\n                query={this.state.currentQuery}\r\n                addToTeamHandler={this.onAddToTeamHandler}\r\n              ></Result>\r\n            </div>\r\n            {/* Credit box */}\r\n            <CreditBox\r\n              name={NAME}\r\n              purpose={PURPOSE}\r\n              creatorLink={CREATOR_LINK}\r\n              sourceCodeLink={SOURCE_CODE_LINK}\r\n            ></CreditBox>\r\n          </div>\r\n        </>\r\n      );\r\n    }\r\n  }\r\n}\r\n","import React from \"react\";\nimport SuperHeroApp from \"./Components/SuperHeroApp\";\nimport { Helmet } from \"react-helmet\";\n\nconst TITLE = \"Superhero Team Builder\";\nfunction App() {\n  return (\n    <div className=\"App\">\n      {/* Modify the head element to ensure the tab has the correct title */}\n      <Helmet>\n        {\" \"}\n        <title>{TITLE}</title>\n      </Helmet>\n      <SuperHeroApp></SuperHeroApp>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nconst root = document.getElementById(\"root\");\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  root\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}